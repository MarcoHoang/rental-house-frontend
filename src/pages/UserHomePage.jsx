import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { Link } from "react-router-dom";
import propertyApi from "../api/propertyApi";
import HouseList from "../components/house/HouseList";
import Header from "../components/layout/Header";
import Footer from "../components/layout/Footer";
import SearchBar from "../components/house/SearchBar";
import LoadingSpinner from "../components/common/LoadingSpinner";

import { Plus, Home, User } from "lucide-react";

const MainContent = styled.main`
  /* Component ch√≠nh b·ªçc n·ªôi dung, ƒë·∫£m b·∫£o kh√¥ng c√≥ style th·ª´a */
`;

// Section cho ph·∫ßn banner ch√≠nh, chi·∫øm to√†n b·ªô chi·ªÅu r·ªông
const HeroSection = styled.section`
  background: linear-gradient(to right, #6a82fb, #fc5c7d);
  color: white;
  text-align: center;
  padding: 5rem 2rem; /* TƒÉng padding ƒë·ªÉ tr√¥ng r·ªông r√£i h∆°n */

  h1 {
    font-size: 3rem; /* TƒÉng k√≠ch th∆∞·ªõc ch·ªØ cho ti√™u ƒë·ªÅ ch√≠nh */
    font-weight: 700;
    margin-bottom: 1.5rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Th√™m b√≥ng ƒë·ªï cho ch·ªØ ƒë·ªÉ n·ªïi b·∫≠t */
  }
`;

// Section cho danh s√°ch nh√† n·ªïi b·∫≠t
const FeaturedSection = styled.section`
  padding: 4rem 2rem; /* Kho·∫£ng ƒë·ªám tr√™n/d∆∞·ªõi v√† hai b√™n */
  background-color: #ffffff; /* Th√™m n·ªÅn tr·∫Øng ƒë·ªÉ t√°ch bi·ªát v·ªõi n·ªÅn body x√°m nh·∫°t */
`;

const SectionTitle = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  text-align: center;
  margin-bottom: 3rem; /* TƒÉng kho·∫£ng c√°ch v·ªõi danh s√°ch b√™n d∆∞·ªõi */
  color: #343a40;
`;

const SearchAndFilterBar = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  justify-content: center;
  
  @media (max-width: 768px) {
    flex-direction: column;
    align-items: center;
  }
`;

const SearchInput = styled.input`
  flex: 1;
  min-width: 250px;
  max-width: 400px;
  padding: 0.75rem 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  
  &:focus {
    outline: none;
    border-color: #6a82fb;
    box-shadow: 0 0 0 3px rgba(106, 130, 251, 0.1);
  }
`;

const FilterSelect = styled.select`
  padding: 0.75rem 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  background: white;
  min-width: 150px;
  
  &:focus {
    outline: none;
    border-color: #6a82fb;
  }
`;

const ResultsInfo = styled.div`
  text-align: center;
  margin-bottom: 2rem;
  color: #64748b;
  font-size: 0.875rem;
`;

// Box hi·ªÉn th·ªã th√¥ng b√°o l·ªói
const ErrorMessage = styled.div`
  color: #721c24;
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  padding: 1rem 1.5rem;
  border-radius: 8px;
  text-align: center;
  margin: 2rem auto;
  max-width: 600px;
`;

// --- HomePage Component ---
// ƒê√¢y l√† component ch√≠nh c·ªßa trang ch·ªß

const HomePage = () => {
  // --- State Management ---
  // Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa component: danh s√°ch nh√†, ƒëang t·∫£i, v√† l·ªói
  const [houses, setHouses] = useState([]);
  const [filteredHouses, setFilteredHouses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('ALL');
  const [typeFilter, setTypeFilter] = useState('ALL');

  // --- Data Fetching ---
  // S·ª≠ d·ª•ng useEffect ƒë·ªÉ g·ªçi API (ho·∫∑c d·ªØ li·ªáu gi·∫£) m·ªôt l·∫ßn khi component render
  useEffect(() => {
    const fetchHouses = async () => {
      try {
        setLoading(true); // B·∫Øt ƒë·∫ßu t·∫£i, b·∫≠t spinner
        console.log('üè† Starting to fetch houses...');
        
        const response = await propertyApi.getPublicProperties(); // G·ªçi API l·∫•y b√†i ƒëƒÉng c√¥ng khai
        console.log('üè† API Response:', response);
        console.log('üè† Response type:', typeof response);
        console.log('üè† Response keys:', response ? Object.keys(response) : 'no response');
        
        // X·ª≠ l√Ω response format m·ªôt c√°ch linh ho·∫°t
        let housesData = [];
        
        if (response && response.content) {
          console.log('üè† Using response.content');
          housesData = response.content;
        } else if (response && response.data) {
          console.log('üè† Using response.data');
          housesData = response.data;
        } else if (Array.isArray(response)) {
          console.log('üè† Response is array, using directly');
          housesData = response;
        } else if (response && typeof response === 'object') {
          console.log('üè† Response is object, checking for data');
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† mock data kh√¥ng
          if (response.content && Array.isArray(response.content)) {
            housesData = response.content;
          } else {
            console.warn('üè† No valid data structure found in response');
            housesData = [];
          }
        } else {
          console.warn('üè† Invalid response format');
          housesData = [];
        }
        
        console.log('üè† Extracted houses data:', housesData);
        console.log('üè† Houses data length:', housesData.length);
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† mock data kh√¥ng
        if (housesData.length > 0) {
          const firstHouse = housesData[0];
          console.log('üè† First house sample:', {
            id: firstHouse.id,
            title: firstHouse.title,
            name: firstHouse.name,
            address: firstHouse.address,
            price: firstHouse.price,
            isMock: firstHouse.isMock || false
          });
        }
        
        setHouses(housesData); // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
        setFilteredHouses(housesData);
        setError(null); // X√≥a b·∫•t k·ª≥ l·ªói n√†o tr∆∞·ªõc ƒë√≥
        
        console.log('üè† Successfully set houses data, count:', housesData.length);
      } catch (err) {
        // N·∫øu c√≥ l·ªói, c·∫≠p nh·∫≠t state l·ªói
        console.error("üè† Error in fetchHouses:", err);
        setError(
          "R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra. Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√† cho thu√™."
        );
      } finally {
        // D√π th√†nh c√¥ng hay th·∫•t b·∫°i, c≈©ng t·∫Øt spinner
        setLoading(false);
        console.log('üè† Fetch houses completed');
      }
    };

    fetchHouses();
  }, []); // M·∫£ng r·ªóng `[]` ƒë·∫£m b·∫£o useEffect ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t

  // Filter v√† search nh√†
  useEffect(() => {
    let filtered = houses;
    
    // Filter theo status
    if (statusFilter !== 'ALL') {
      filtered = filtered.filter(house => house.status === statusFilter);
    }
    
    // Filter theo lo·∫°i nh√†
    if (typeFilter !== 'ALL') {
      filtered = filtered.filter(house => house.houseType === typeFilter);
    }
    
    // Search theo t√™n ho·∫∑c ƒë·ªãa ch·ªâ (local search)
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(house => 
        (house.title && house.title.toLowerCase().includes(term)) ||
        (house.name && house.name.toLowerCase().includes(term)) ||
        (house.address && house.address.toLowerCase().includes(term))
      );
    }
    
    setFilteredHouses(filtered);
  }, [houses, searchTerm, statusFilter, typeFilter]);

  // H√†m search s·ª≠ d·ª•ng API backend
  const handleSearch = async (keyword) => {
    if (!keyword || keyword.trim() === '') {
      // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a, hi·ªÉn th·ªã t·∫•t c·∫£ nh√†
      setFilteredHouses(houses);
      return;
    }

    try {
      setLoading(true);
      console.log('üîç Searching houses with keyword:', keyword);
      
      const response = await propertyApi.searchHouses(keyword);
      console.log('üîç Search response:', response);
      
      const searchResults = response.content || response.data || [];
      setFilteredHouses(searchResults);
      
      console.log('üîç Search completed, found:', searchResults.length, 'houses');
    } catch (error) {
      console.error('üîç Search error:', error);
      // N·∫øu search API th·∫•t b·∫°i, fallback v·ªÅ local search
      const term = keyword.toLowerCase();
      const localResults = houses.filter(house => 
        (house.title && house.title.toLowerCase().includes(term)) ||
        (house.name && house.name.toLowerCase().includes(term)) ||
        (house.address && house.address.toLowerCase().includes(term))
      );
      setFilteredHouses(localResults);
    } finally {
      setLoading(false);
    }
  };

  // --- Content Rendering Logic ---
  // M·ªôt h√†m nh·ªè ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã g√¨ d·ª±a tr√™n tr·∫°ng th√°i (loading, error, success)
  const renderHouseContent = () => {
    if (loading) {
      return <LoadingSpinner />;
    }
    if (error) {
      return <ErrorMessage>{error}</ErrorMessage>;
    }
    if (houses.length === 0) {
      return (
        <p style={{ textAlign: "center" }}>Hi·ªán ch∆∞a c√≥ nh√† n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p>
      );
    }
    if (filteredHouses.length === 0) {
      return (
        <div style={{ textAlign: "center", color: "#64748b", padding: "2rem" }}>
          <p>Kh√¥ng t√¨m th·∫•y nh√† n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.</p>
          <p>Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a ho·∫∑c b·ªô l·ªçc kh√°c.</p>
        </div>
      );
    }
    return <HouseList houses={filteredHouses} />;
  };

  // --- JSX to Render ---
  // C·∫•u tr√∫c HTML c·ªßa trang ch·ªß
  return (
    <div>
      <Header />

      <MainContent>
        <HeroSection>
          <h1>T√¨m ki·∫øm ng√¥i nh√† m∆° ∆∞·ªõc c·ªßa b·∫°n</h1>
          <SearchBar onSearch={handleSearch} />
        </HeroSection>

        <FeaturedSection>
          <SectionTitle>Nh√† cho thu√™ n·ªïi b·∫≠t</SectionTitle>
          
          <SearchAndFilterBar>
            <SearchInput
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c ƒë·ªãa ch·ªâ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <FilterSelect
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="ALL">T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option value="ACTIVE">ƒêang cho thu√™</option>
              <option value="INACTIVE">T·∫°m d·ª´ng</option>
              <option value="PENDING">Ch·ªù duy·ªát</option>
              <option value="RENTED">ƒê√£ cho thu√™</option>
            </FilterSelect>
            <FilterSelect
              value={typeFilter}
              onChange={(e) => setTypeFilter(e.target.value)}
            >
              <option value="ALL">T·∫•t c·∫£ lo·∫°i nh√†</option>
              <option value="APARTMENT">CƒÉn h·ªô</option>
              <option value="HOUSE">Nh√† ph·ªë</option>
              <option value="VILLA">Bi·ªát th·ª±</option>
              <option value="STUDIO">Studio</option>
            </FilterSelect>
          </SearchAndFilterBar>
          
          <ResultsInfo>
            Hi·ªÉn th·ªã {filteredHouses.length} trong t·ªïng s·ªë {houses.length} nh√† cho thu√™
          </ResultsInfo>
          
          {renderHouseContent()}
        </FeaturedSection>
      </MainContent>

      <Footer />
    </div>
  );
};

export default HomePage;
